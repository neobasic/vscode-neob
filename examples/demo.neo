#! /usr/bin/neo
#! i18n=pt-BR  #comentário

#$ defer prop <- $/config.ini  #comentário

#? x <= 100 ! "Erro de Validação">  #comentário

# This is a line #hashtag.

## 
This is a block comment. #hashtag
##

### #teste
 This is a block for documentation comment. #hashtag
###

#comentario com #varias #hashtags #logoNoInicio

@okokok= var x = y + 99

@trace> teste do tracing  #comentário qualquer coisa #segundahashtag
@debug> teste do tracing
@info> teste do info
@warn> teste do tracing  #comentário
@error> teste do tracing
@> fatal teste do tracing ## esse é um comentário de #bloco ##


const index = iota

const char = '\n'

const nome = 'za \afs \o456 fads \xfa \sdfasd \fd  {4543+3}'

const nome = "zzzf asf asdf \asdf asdf \asdf "

const nome = ''' asdfsdafasd\fasfdas '''

const nome = """ asdfsdafasdfasfdas """

const imag = 8 + 3i

const PI = 3.14

const tx = 2.56E23

const xy = 23//12

const bina = 0b1111_0000_1010_1111_0000_1111_0000_1111_0000_1111_0000_1111_0000_1111_0000_1111;

const regexEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
const regexSenha = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d@$!%*?&]{8,}$/

const regexTelefone = /^\(\d{2}\) \d{5}-\d{4}$/
const palavras = frase.match(/\b\w+\b/g)

const data = "Hoje é 07/08/2025."
const ano = data.match(/\d{4}/)[0]

const nomeCompleto = "João da Silva"
const partes = nomeCompleto.match(/(\w+) da (\w+)/)

const textoComEspacos = "  Olá,  mundo!  \n\n  Que bom."
const textoLimpo = textoComEspacos.replace(/\s+/g, ' ')

const numero = "11987654321"
const numeroFormatado = numero.replace(/^(\d{2})(\d{5})(\d{4})$/, '($1) $2-$3')

const stringKebabCase = "exemplo-de-string"
const camelCase = stringKebabCase.replace(/-(\w)/g, (\ match, p1 => p1;upper)

const rex = /abc/
const regx = /abc/gi
const rx1 = /[a-z]/
const rx2 = /a{2,4}/
const rx3 = /cat|dog|bird/
const regex = /\d\.\d{2}/
const regex = /(foo|bar)+/
const regex = /\d+(?=px)/
const result = "2025-08-07".match(/(\d{4})-(\d{2})-(\d{2})/)



print "Hello World!" this.name 

enter "Digite um número: ", x


print "Hello World!" this.name



@Public class Block
public
    sprite Sprite                         # Como o bloco aparece na tela
    isDestroyed bool = False              # Se foi destruído ou não
    points int = 10                       # Quantos pontos vale

    destroy() => isDestroyed = True       # Marcar como destruído 
    getBounds() FloatRect                 # Área de colisão
    draw(window RenderWindow)             # Desenhar na tela 


class Block
  +sprite Sprite                    # Como o bloco aparece na tela
  +isDestroyed bool = False         # Se foi destruído ou não
  +points int = 10                  # Quantos pontos vale
    
  +destroy() => isDestroyed = True  # Marcar como destruído 
  +getBounds() FloatRect            # Área de colisão
  +draw(RenderWindow& window)       # Desenhar na tela
