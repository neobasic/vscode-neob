#! /usr/bin/neo
#! i18n=pt-BR  #comentário

#$ defer prop <- $/config.ini  #comentário

#? x <= 100 ! "Erro de Validação">  #comentário

# This is a line #hashtag.

## 
This is a block comment. #hashtag
##

### #teste
 This is a block for documentation comment. #hashtag
###

#comentario com #varias #hashtags #logoNoInicio

@okokok= var x = y + 99

@trace> teste do tracing  #comentário qualquer coisa #segundahashtag
@debug> teste do tracing
@info> teste do info
@warn> teste do tracing  #comentário
@error> teste do tracing
@> fatal teste do tracing ## esse é um comentário de #bloco ##


const index = iota

const char = '\n'

const nome = 'za afs fadsfa sdfasd fd'

const nome = "zzzf asf asdf asdf asdf asdf "

const nome = ''' asdfsdafasdfasfdas '''

const nome = """ asdfsdafasdfasfdas """

const imag = 8 + 3i

const PI = 3.14

const tx = 2.56E23

const xy = 23//12


print "Hello World!" this.name 

enter "Digite um número: ", x


print "Hello World!" this.name



@Public class Block
public
    sprite Sprite                         # Como o bloco aparece na tela
    isDestroyed bool = False              # Se foi destruído ou não
    points int = 10                       # Quantos pontos vale

    destroy() => isDestroyed = True       # Marcar como destruído 
    getBounds() FloatRect                 # Área de colisão
    draw(window RenderWindow)             # Desenhar na tela 


class Block
  +sprite Sprite                    # Como o bloco aparece na tela
  +isDestroyed bool = False         # Se foi destruído ou não
  +points int = 10                  # Quantos pontos vale
    
  +destroy() => isDestroyed = True  # Marcar como destruído 
  +getBounds() FloatRect            # Área de colisão
  +draw(RenderWindow& window)       # Desenhar na tela
