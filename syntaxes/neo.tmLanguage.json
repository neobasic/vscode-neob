{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "NeoBASIC",
	"scopeName": "source.neo",
	"fileTypes": ["neo"],



	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#magic-comments"
		},
		{
			"include": "#magic-statements"
		},


		{
			"include": "#keywords"
		},
		{
			"include": "#value-constructors"
		},
		{
			"include": "#language-monads"
		},
		{
			"include": "#reserved-variables"
		},
		{
			"include": "#operators"
		},


		{
			"include": "#strings"
		}
	],



	"repository": {
        "comments": {
            "patterns": [
                {
					"name": "comment.line.number-sign.neo",
					"begin": "(#)(?=\\w)(\\w+)",
					"beginCaptures": { 
						"1": { 
							"name": "punctuation.definition.comment.neo meta.hashtag.neo"
						},
						"2": { 
							"name": "meta.hashtag.neo"
						} 
					},
					"end": "$",
					"patterns": [
						{
						"name": "meta.hashtag.neo",
						"match": "#\\w+"
						}
					]
				},

                {
					"name": "comment.line.number-sign.neo",
					"begin": "(#)(?![#!?$])",
					"beginCaptures": { 
						"1": { 
							"name": "punctuation.definition.comment.neo"
						}
					},
					"end": "$",
					"patterns": [
						{
						"name": "meta.hashtag.neo",
						"match": "#\\w+"
						}
					]
				},

                {
                    "name": "comment.block.neo",
                    "begin": "##(?!#)",
                    "end": "##(?!#)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.neo"
                        }
                    },
					"patterns": [
						{
						"name": "meta.hashtag.neo",
						"match": "#\\w+"
						}
					]
                },

                {
                    "name": "comment.block.documentation.neo",
                    "begin": "###",
                    "end": "###",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.neo"
                        }
                    },
					"patterns": [
						{
						"name": "meta.hashtag.neo",
						"match": "#\\w+"
						}
					]
                }
            ]
        },


        "magic-comments": {
      	  "patterns": [
            {
              "name": "comment.line.shebang.neo meta.shebang.neo",
			  "match": "\\A(#!)[^#\\\\]*(?=\\\\|#|$)",
			  "captures": {
				"1": {
					"name": "punctuation.definition.comment.shebang.neo"
				}
			  }
			},
            {
              "name": "comment.line.directive.neo meta.directive.neo",
			  "match": "^(#!)[^#\\\\]*(?=\\\\|#|$)",
			  "captures": {
				"1": {
					"name": "punctuation.definition.comment.directive.neo"
				}
			  }
			},
            {
              "name": "comment.line.woodstock.neo meta.woodstock.neo", 
			  "match": "^(#\\?)[^#\\\\]*(?=\\\\|#|$)",
			  "captures": {
				"1": {
					"name": "punctuation.definition.comment.woodstock.neo"
				}
			  }
			},
            {
              "name": "comment.line.sherlock.neo meta.sherlock.neo", 
			  "match": "^(#\\$)[^#\\\\]*(?=\\\\|#|$)",
			  "captures": {
				"1": {
					"name": "punctuation.definition.comment.sherlock.neo"
				}
			  }
			}
		  ] 
		},




        "magic-statements": {
			"patterns": [
				{
					"name": "punctuation.definition.atom.rubber-duck.neo",
					"match": "^(@)([a-zA-Z0-9_]*)?(=)([^#\\\\]*)(?=\\\\|#|$)",
					"captures": {
						"1": { 
							"name": "punctuation.definition.atom.rubber-duck.begin.neo" 
						},
						"2": { 
							"name": "punctuation.definition.atom.rubber-duck.$2.neo" 
						},
						"3": { 
							"name": "punctuation.definition.atom.rubber-duck.end.neo" 
						},
						"4": { 
							"name": "meta.rubber-duck.neo" 
						}
					}
				},
				{
					"name": "punctuation.definition.atom.tracer-bird.neo",
					"match": "^(@)([a-zA-Z0-9_]*)?(>)([^#\\\\]*)(?=\\\\|#|$)",
					"captures": { 
						"1": { 
							"name": "punctuation.definition.atom.tracer-bird.begin.neo" 
						},
						"2": { 
							"name": "punctuation.definition.atom.tracer-bird.$2.neo" 
						},
						"3": { 
							"name": "punctuation.definition.atom.tracer-bird.end.neo" 
						},
						"4": { 
							"name": "meta.tracer-bird.neo" 
						} 
					}
				}
			]
		},

		"keywords": {
			"patterns": [
				{
					"comment": "IMPORT CONTROL KEYWORDS",
					"name": "keyword.control.import.$1.neo",
					"match": "\\b(use|as|of|include|interface|socket|http|https|rest|soap|grpc|amqp|ftp|smtp|imap|pop3)\\b"
				},
				{
					"comment": "FLOW CONTROL KEYWORDS",
					"name": "keyword.control.flow.$1.neo",
					"match": "\\b(do|with|defer|next|redo|break|retry|orelse|continue|fallthrough|return|yield|go|to|switch|when|default|await|async|thread|task|node)\\b"
				},
				{
					"comment": "CONDITIONAL CONTROL KEYWORDS",
					"name": "keyword.control.conditional.$1.neo",
					"match": "\\b(if|then|else|unless|case|match|try|catch)\\b"
				},
				{
					"comment": "LOOPING CONTROL KEYWORDS",
					"name": "keyword.control.looping.$1.neo",
					"match": "\\b(loop|times|for|each|step|while|until)\\b"
				},
				{
					"comment": "TESTING CONTROL KEYWORDS",
					"name": "keyword.control.test.$1.neo",
					"match": "\\b(invar|unit|from|once|data|call|hide|show|into|pass|past|fail)\\b"
				},



				{
					"comment": "TOP SENTENCE DECLARATION KEYWORDS",
					"name": "storage.type.$1.neo",
					"match": "\\b(module|const|val|var|let|type|def|defn|undef|fact|feed|fmap|func|sub|rpc|extern|event|enum|struct|proto|trait|class|get|set)\\b"
				},


				{
					"comment": "PRIMITIVE LOGICAL DATA TYPES",
					"name": "storage.type.logic.$1.neo",
					"match": "\\b(Bool(8|16|32|64|128)?)\\b"
				},
				{
					"comment": "PRIMITIVE NUMERICAL DATA TYPES",
					"name": "storage.type.numeric.$1.neo",
					"match": "\\b(Number|Dig|Bit|Oct|Hex|Nibble|Byte|Nat(8|16|32|64|128)?|Bignat|Int(8|16|32|64|128)?|Bigint|Real(8|16|32|64|128)?|Bigreal|Dec(1|2|3|4|5|6|7|8)?|Money|Bigdec|Ratio(16|32|64|128|256)?|Complex(16|32|64|128|256)?|Quatern(32|64|128|256)?)\\b" 
				},
				{
					"comment": "PRIMITIVE TEMPORAL DATA TYPES",
					"name": "storage.type.time.$1.neo",
					"match": "\\b(Date|Elapse)\\b"
				},
				{
					"comment": "PRIMITIVE CHARACTER DATA TYPES",
					"name": "storage.type.char.$1.neo",
					"match": "\\b(Ascii|Char)\\b"
				},
				{
					"comment": "PRIMITIVE SEQUENCE DATA TYPES",
					"name": "storage.type.sequence.$1.neo",
					"match": "\\b(Str|Regex|Binary)\\b" 
				},
				{
					"comment": "PRIMITIVE SHELL DATA TYPES",
					"name": "storage.type.sequence.$1.neo",
					"match": "\\b(Path|Uri|Inet)\\b" 
				},
				{
					"comment": "PRIMITIVE MISCELLANEOUS DATA TYPES",
					"name": "storage.type.other.$1.neo",
					"match": "\\b(Any|Void|Atom|)\\b"
				},
				{
					"comment": "PRIMITIVE COMPOSITE DATA TYPES",
					"name": "storage.type.composite.$1.neo",
					"match": "\\b(Range|Map)\\b"
				},
				{
					"comment": "PRIMITIVE ARRAY DATA TYPES",
					"name": "storage.type.composite.$1.neo",
					"match": "\\b(Array|Tuple|List|Dict|Chan|Vec|Mat|Set|Queue|Deque|Xml|Table|Memo)\\b"
				},


				{
					"comment": "BUILT-IN MATH FUNCTIONS",
					"name": "support.function.math.$1.neo",
					"match": "\\b(round|sin|cos|tan|log|log2|log10)\\b"
				},
				{
					"comment": "BUILT-IN TEXT FUNCTIONS",
					"name": "support.function.text.$1.neo",
					"match": "\\b(len|[lr]?trim|indexOf)\\b"
				},
				{
					"comment": "BUILT-IN TIME FUNCTIONS",
					"name": "support.function.time.$1.neo",
					"match": "\\b()\\b" 
				},
				{
					"comment": "BUILT-IN STANDARD FUNCTIONS",
					"name": "support.function.stdl.$1.neo",
					"match": "\\b(enter|print)\\b" 
				},



				{
					"comment": "BUILT-IN NUMERICAL MODIFIERS",
					"name": "support.modif.numeric.$1.neo",
					"match": "\\b(abs|ceil|floor)\\b"
				},
				{
					"comment": "BUILT-IN TEXT MODIFIERS",
					"name": "support.modif.text.$1.neo",
					"match": "\\b(upper|lower|titled|trim|ltrim|rtrim|pascal|camel|snake|kebab)\\b"
				},
				{
					"comment": "BUILT-IN TEMPORAL MODIFIERS",
					"name": "support.modif.time.$1.neo",
					"match": "\\b(year|month|day|week|workday|hour|minute|second|milli|micro|nano|tick|tzone|ago|ahead)\\b"
				},
				{
					"comment": "BUILT-IN FACT MODIFIERS",
					"name": "support.modif.fact.$1.neo",
					"match": "\\b(all|any|one|two|nil)\\b"
				},



				{
					"comment": "BUILT-IN SHELL FACTS",
					"name": "support.fact.shell.$1.neo",
					"match": "\\b(exist|ready)\\b"
				},



				{
					"comment": "BUILT-IN CONSOLE MACROS",
					"name": "support.macro.console.$1.neo",
					"match": "\\b(at|scan|entry|echo|alert|till|since|timely|cancel|play|cls)\\b"  
				},
				{
					"comment": "BUILT-IN SHELL MACROS",
					"name": "support.macro.shell.$1.neo",
					"match": "\\b(cd|pwd|ls|mkdir|rmdir|touch|rm|cp|mv|rename|chmod|chown|chgrp)\\b"  
				},
				{
					"comment": "BUILT-IN ERROR-HANDLING MACROS",
					"name": "support.macro.error.$1.neo",
					"match": "\\b(raise|panic)\\b"
				},



				{
					"comment": "BOOLEAN OPERATORS",
					"name": "keyword.operator.boolean.$1.neo",
					"match": "\\b(not|and|or|xor|nand|nor|nxor)\\b"
				},
				{
					"comment": "MISCELLANEOUS OPERATORS",
					"name": "keyword.operator.other.$1.neo",
					"match": "\\b(typeof|instanceof|sizeof|is|in|between|like|new|del)\\b"
				}




			]
		},


		"language-monads": {
			"patterns": [
				{
					"comment": "LANGUAGE RESULT OPTIONAL MONAD",
					"name": "variable.language.result.$1.neo",
					"match": "\\b(Okay|Fail)\\b"
				},
				{
					"comment": "LANGUAGE MAYBE OPTIONAL MONAD",
					"name": "variable.language.maybe.$1.neo",
					"match": "\\b(Some|None)\\b"
				},
				{
					"comment": "LANGUAGE EITHER OPTIONAL MONAD",
					"name": "variable.language.either.$1.neo",
					"match": "\\b(Yea|Nay)\\b"
				},
				{
					"comment": "LANGUAGE STREAM OPTIONAL MONAD",
					"name": "variable.language.stream.$1.neo",
					"match": "\\b(Data|EoT)\\b"
				}
			]
		},


		"value-constructors": {
			"patterns": [
				{
					"comment": "LOGICAL VALUE CONSTRUCTORS",
					"name": "constant.language.logic.$1.neo",
					"match": "\\b(False|True)\\b"
				},
				{
					"comment": "NUMERICAL VALUE CONSTRUCTORS",
					"name": "constant.language.numeric.$1.neo",
					"match": "\\b(Zero|Nonzero|MinValue|MaxValue|NaN|NegativeInfinity|PositiveInfinity)\\b"
				},
				{
					"comment": "TEMPORAL VALUE CONSTRUCTORS",
					"name": "constant.language.time.$1.neo",
					"match": "\\b(Epoch|Eon|Yesterday|Today|Now|Tomorrow|LocalDate|LocalDateTime|OffsetDate|OffsetDateTime|ZonedDate|ZonedDateTime)\\b"
				},
				{
					"comment": "CHARACTER VALUE CONSTRUCTORS",
					"name": "constant.language.time.$1.neo",
					"match": "\\b(Letter|Mark|Digit|Punctuation|Symbol|Separator|Other|NonPrintable|Null|)\\b"
				},
				{
					"comment": "SEQUENCE VALUE CONSTRUCTORS",
					"name": "constant.language.sequence.$1.neo",
					"match": "\\b(Blank|Nonblank)\\b"
				},
				{
					"comment": "FILESYSTEM VALUE CONSTRUCTORS",
					"name": "constant.language.path.$1.neo",
					"match": "\\b(Folder|File|LinkFile|PipeFile|SocketFile|BlockDevice|CharDevice|NullDevice)\\b"  
				},
				{
					"comment": "INET VALUE CONSTRUCTORS",
					"name": "constant.language.inet.$1.neo",
					"match": "\\b(Ipv4|Ipv6)\\b"  
				},
				{
					"comment": "URI VALUE CONSTRUCTORS",
					"name": "constant.language.uri.$1.neo",
					"match": "\\b(Url|Urn)\\b"  
				}
			]
		},


		"reserved-variables": {
			"patterns": [
				{
					"comment": "RESERVED LANGUAGE VARIABLES",
					"name": "variable.language.$1.neo",
					"match": "\\b(this|iota|nth|one|end|it|self|super)\\b"
				}
			]
		},


		"operators": {
			"comment": "NOTE THAT THE ORDER HERE IS VERY IMPORTANT!",
			"patterns": [
				{
					"match": "<\\-",
					"name": "keyword.operator.channel.neo"
				},
				{
					"match": "\\-\\-",
					"name": "keyword.operator.decrement.neo"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.neo"
				},
				{
					"match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.neo"
				},
				{
					"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
					"name": "keyword.operator.assignment.neo"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.neo"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.neo"
				},
				{
					"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>|\\~)",
					"name": "keyword.operator.arithmetic.bitwise.neo"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.ellipsis.neo"
				}
			]
		},


		"strings":  {
            "patterns": [
				{
					"name": "string.quoted.double.neo",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.neo",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.triple.neo",
					"begin": "\"\"\"",
					"end": "\"\"\"",
					"patterns": [
						{
							"name": "constant.character.escape.neo",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.neo",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.neo",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.triple.neo",
					"begin": "'''",
					"end": "'''",
					"patterns": [
						{
						"name": "constant.character.escape.neo",
						"match": "\\\\."
						}
					]
					}
			]
		}
		
	}
}
